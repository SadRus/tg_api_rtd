Клиент: !concept
  определение: |
    Штука, которая позволяет обратиться к Telegram Bot API от лица заранее созданного чат-бота.
    Англ. Client.
  Синхронный клиент: !example |
    Синхронный клиент предоставляет строго синхронные методы для взаимодействия с Tg Bot API.
  Асинхронный: !example |
    Синхронный клиент предоставляет строго асинхронные методы для взаимодействия с Tg Bot API.
  Смешанный синхронно-асинхронный клиент: !exclusion  # TODO почему исключаем такой вариант? Он выглядит вполне реализуемым.
  Вложенные клиенты: !example |
    Прикладной код сначала создаёт/настраивает своего клиента для взаимодействия с Tg Bot API от лица чат-бота
    для пользователей, а затем какая-то из библиотек создаёт/настраивает второго клиента для отправки
    логов с ошибками админам бота от лица админского Tg бота. Получается, в программе используются сразу два чат-бота,
    клиенты для них инициализируются вложенным образов -- сначала один, затем другой, уже внутри контекста первого.
  Вложенные смешанные клиенты синхронные и асинхронные: !example
  Дефолтный синхронный клиент: !example
  Дефолтный асинхронный клиент: !example
  Клиент с дефолтным адресатом: !example |
    Запросы к Tg Bot API получают дефолтное значение chat_id для адреса новых сообщений.


Запрос к Tg Bot API: !concept
  определение: |
    Тонкая обёртка над HTTP запросом -- позволяет проверить данные перед отправкой, получить от IDE подсказки по
    схеме данных, предзаполнить дефолтными значениями и разбить процесс формирования запроса на этапы, каждый из
    которых дополняет и переписывает данные запроса перед отправкой.
    Англ. Request.
  С методами для отправки HTTP запроса: !example
  С дефолтными значениями для полей: !example
  Multipart form data: !example |
    Запрос предназначен для отправки бинарных данных в Tg Bot API с кодировкой HTTP запроса `multipart/form-data` вместо
    привычного `application/x-www-form-urlencoded`. 
  Только с синхронными методами: !example
  Только с асинхронными методами: !example
  Со смешанными синхронно-асинхронными методами: !example
  Универсальный запрос к нескольким API endpoints: !extension |
    Универсальный запрос, подходящий для нескольких API endpoints


Ответ Tg Bot API: !concept
  определение: |
    Тонкая обёртка над HTTP ответом -- позволяет провалидировать данные на соответствие схемы, когда те получены не
    от настоящего Tg Bot API, например в автотестах. Также Ответ Tg Bot API позволяет получить от IDE подсказки в коде по
    схеме данных, конвертировать сырые данные в более удобные и предоставляет методы-shortcuts для частых рутинных операций.
    Англ. Response.
  Универсальный ответ, описывающий схему для нескольких API endpoints: !extension
  # TODO Описать больше example, extension и exclusion


Метод Tg Bot API: !concept
  определение: |
    Метод Tg Bot API Tg -- это способ взаимодействия с Tg Bot API. Складывается из сочетания выбранных API endpoint, Request и HTTP method
    Англ. Method.
  # TODO включают в себя и запросы и ответы
  sendMessage: !example
  Бинарная картинка: !example
  # TODO Описать больше example, extension и exclusion


Тип данных Tg Bot API: !concept
  описание: |
    Реиспользуемые типы данных, из которых как из конструктора собираются методы Tg Bot API с учётом их особенностей.
    Англ. Type.
  # TODO Описать больше example, extension и exclusion
